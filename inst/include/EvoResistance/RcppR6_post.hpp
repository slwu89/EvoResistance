// Generated by RcppR6 (0.2.4): do not edit by hand
#ifndef _EVORESISTANCE_RCPPR6_POST_HPP_
#define _EVORESISTANCE_RCPPR6_POST_HPP_

#include <Rcpp.h>
#include <EvoResistance/RcppR6_support.hpp>

namespace EvoResistance {
namespace RcppR6 {
namespace traits {
template <> inline std::string   class_name_r<parameters >() {return "parameters";}
template <> inline std::string   package_name<parameters >() {return "EvoResistance";}
template <> inline std::string generator_name<parameters >() {return ".R6_parameters";}
template <> inline std::string   class_name_r<trajectory >() {return "trajectory";}
template <> inline std::string   package_name<trajectory >() {return "EvoResistance";}
template <> inline std::string generator_name<trajectory >() {return ".R6_trajectory";}
template <> inline std::string   class_name_r<fixation_probability >() {return "fixation_probability";}
template <> inline std::string   package_name<fixation_probability >() {return "EvoResistance";}
template <> inline std::string generator_name<fixation_probability >() {return ".R6_fixation_probability";}
}
}
}

namespace Rcpp {
template <typename T>
SEXP wrap(const EvoResistance::RcppR6::RcppR6<T>& x) {
  return x.to_R6();
}

namespace traits {
template <typename T>
class Exporter<EvoResistance::RcppR6::RcppR6<T> > {
public:
  Exporter(SEXP x) : obj(EvoResistance::RcppR6::RcppR6<T>(x)) {}
  inline EvoResistance::RcppR6::RcppR6<T> get() { return obj; }
private:
  EvoResistance::RcppR6::RcppR6<T> obj;
};
}

template <> inline SEXP wrap(const parameters& x) {
  return wrap(EvoResistance::RcppR6::RcppR6<parameters>(x));
}
template <> inline parameters as(SEXP x) {
  return *(EvoResistance::RcppR6::RcppR6<parameters>(x));
}
template <> inline SEXP wrap(const trajectory& x) {
  return wrap(EvoResistance::RcppR6::RcppR6<trajectory>(x));
}
template <> inline trajectory as(SEXP x) {
  return *(EvoResistance::RcppR6::RcppR6<trajectory>(x));
}
template <> inline SEXP wrap(const fixation_probability& x) {
  return wrap(EvoResistance::RcppR6::RcppR6<fixation_probability>(x));
}
template <> inline fixation_probability as(SEXP x) {
  return *(EvoResistance::RcppR6::RcppR6<fixation_probability>(x));
}
}

#endif
